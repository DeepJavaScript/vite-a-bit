(()=>{"use strict";function e(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function t(i,r){void 0===i&&(i={}),void 0===r&&(r={}),Object.keys(r).forEach((function(s){void 0===i[s]?i[s]=r[s]:e(r[s])&&e(i[s])&&Object.keys(r[s]).length>0&&t(i[s],r[s])}))}var i={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function r(){var e="undefined"!=typeof document?document:{};return t(e,i),e}var s={document:i,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(e){return"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame:function(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function n(){var e="undefined"!=typeof window?window:{};return t(e,s),e}function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function d(e,t,i){return(d=l()?Reflect.construct:function(e,t,i){var r=[null];r.push.apply(r,t);var s=new(Function.bind.apply(e,r));return i&&o(s,i.prototype),s}).apply(null,arguments)}function u(e){var t="function"==typeof Map?new Map:void 0;return(u=function(e){if(null===e||(i=e,-1===Function.toString.call(i).indexOf("[native code]")))return e;var i;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return d(e,arguments,a(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),o(r,e)})(e)}var p=function(e){var t,i;function r(t){var i,r,s;return r=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(i=e.call.apply(e,[this].concat(t))||this),s=r.__proto__,Object.defineProperty(r,"__proto__",{get:function(){return s},set:function(e){s.__proto__=e}}),i}return i=e,(t=r).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i,r}(u(Array));function c(e){void 0===e&&(e=[]);var t=[];return e.forEach((function(e){Array.isArray(e)?t.push.apply(t,c(e)):t.push(e)})),t}function v(e,t){return Array.prototype.filter.call(e,t)}function h(e,t){var i=n(),s=r(),a=[];if(!t&&e instanceof p)return e;if(!e)return new p(a);if("string"==typeof e){var o=e.trim();if(o.indexOf("<")>=0&&o.indexOf(">")>=0){var l="div";0===o.indexOf("<li")&&(l="ul"),0===o.indexOf("<tr")&&(l="tbody"),0!==o.indexOf("<td")&&0!==o.indexOf("<th")||(l="tr"),0===o.indexOf("<tbody")&&(l="table"),0===o.indexOf("<option")&&(l="select");var d=s.createElement(l);d.innerHTML=o;for(var u=0;u<d.childNodes.length;u+=1)a.push(d.childNodes[u])}else a=function(e,t){if("string"!=typeof e)return[e];for(var i=[],r=t.querySelectorAll(e),s=0;s<r.length;s+=1)i.push(r[s]);return i}(e.trim(),t||s)}else if(e.nodeType||e===i||e===s)a.push(e);else if(Array.isArray(e)){if(e instanceof p)return e;a=e}return new p(function(e){for(var t=[],i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}(a))}h.fn=p.prototype;var f="resize scroll".split(" ");function m(e){return function(){for(var t=arguments.length,i=new Array(t),r=0;r<t;r++)i[r]=arguments[r];if(void 0===i[0]){for(var s=0;s<this.length;s+=1)f.indexOf(e)<0&&(e in this[s]?this[s][e]():h(this[s]).trigger(e));return this}return this.on.apply(this,[e].concat(i))}}m("click"),m("blur"),m("focus"),m("focusin"),m("focusout"),m("keyup"),m("keydown"),m("keypress"),m("submit"),m("change"),m("mousedown"),m("mousemove"),m("mouseup"),m("mouseenter"),m("mouseleave"),m("mouseout"),m("mouseover"),m("touchstart"),m("touchend"),m("touchmove"),m("resize"),m("scroll");var g={addClass:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var r=c(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).add.apply(t,r)})),this},removeClass:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var r=c(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).remove.apply(t,r)})),this},hasClass:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var r=c(t.map((function(e){return e.split(" ")})));return v(this,(function(e){return r.filter((function(t){return e.classList.contains(t)})).length>0})).length>0},toggleClass:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var r=c(t.map((function(e){return e.split(" ")})));this.forEach((function(e){r.forEach((function(t){e.classList.toggle(t)}))}))},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var i=0;i<this.length;i+=1)if(2===arguments.length)this[i].setAttribute(e,t);else for(var r in e)this[i][r]=e[r],this[i].setAttribute(r,e[r]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},transform:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transform=e;return this},transition:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transitionDuration="string"!=typeof e?e+"ms":e;return this},on:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var r=t[0],s=t[1],n=t[2],a=t[3];function o(e){var t=e.target;if(t){var i=e.target.dom7EventData||[];if(i.indexOf(e)<0&&i.unshift(e),h(t).is(s))n.apply(t,i);else for(var r=h(t).parents(),a=0;a<r.length;a+=1)h(r[a]).is(s)&&n.apply(r[a],i)}}function l(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),n.apply(this,t)}"function"==typeof t[1]&&(r=t[0],n=t[1],a=t[2],s=void 0),a||(a=!1);for(var d,u=r.split(" "),p=0;p<this.length;p+=1){var c=this[p];if(s)for(d=0;d<u.length;d+=1){var v=u[d];c.dom7LiveListeners||(c.dom7LiveListeners={}),c.dom7LiveListeners[v]||(c.dom7LiveListeners[v]=[]),c.dom7LiveListeners[v].push({listener:n,proxyListener:o}),c.addEventListener(v,o,a)}else for(d=0;d<u.length;d+=1){var f=u[d];c.dom7Listeners||(c.dom7Listeners={}),c.dom7Listeners[f]||(c.dom7Listeners[f]=[]),c.dom7Listeners[f].push({listener:n,proxyListener:l}),c.addEventListener(f,l,a)}}return this},off:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var r=t[0],s=t[1],n=t[2],a=t[3];"function"==typeof t[1]&&(r=t[0],n=t[1],a=t[2],s=void 0),a||(a=!1);for(var o=r.split(" "),l=0;l<o.length;l+=1)for(var d=o[l],u=0;u<this.length;u+=1){var p=this[u],c=void 0;if(!s&&p.dom7Listeners?c=p.dom7Listeners[d]:s&&p.dom7LiveListeners&&(c=p.dom7LiveListeners[d]),c&&c.length)for(var v=c.length-1;v>=0;v-=1){var h=c[v];n&&h.listener===n||n&&h.listener&&h.listener.dom7proxy&&h.listener.dom7proxy===n?(p.removeEventListener(d,h.proxyListener,a),c.splice(v,1)):n||(p.removeEventListener(d,h.proxyListener,a),c.splice(v,1))}}return this},trigger:function(){for(var e=n(),t=arguments.length,i=new Array(t),r=0;r<t;r++)i[r]=arguments[r];for(var s=i[0].split(" "),a=i[1],o=0;o<s.length;o+=1)for(var l=s[o],d=0;d<this.length;d+=1){var u=this[d];if(e.CustomEvent){var p=new e.CustomEvent(l,{detail:a,bubbles:!0,cancelable:!0});u.dom7EventData=i.filter((function(e,t){return t>0})),u.dispatchEvent(p),u.dom7EventData=[],delete u.dom7EventData}}return this},transitionEnd:function(e){var t=this;return e&&t.on("transitionend",(function i(r){r.target===this&&(e.call(this,r),t.off("transitionend",i))})),this},outerWidth:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},styles:function(){var e=n();return this[0]?e.getComputedStyle(this[0],null):{}},offset:function(){if(this.length>0){var e=n(),t=r(),i=this[0],s=i.getBoundingClientRect(),a=t.body,o=i.clientTop||a.clientTop||0,l=i.clientLeft||a.clientLeft||0,d=i===e?e.scrollY:i.scrollTop,u=i===e?e.scrollX:i.scrollLeft;return{top:s.top+d-o,left:s.left+u-l}}return null},css:function(e,t){var i,r=n();if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(var s in e)this[i].style[s]=e[s];return this}if(this[0])return r.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(i=0;i<this.length;i+=1)this[i].style[e]=t;return this}return this},each:function(e){return e?(this.forEach((function(t,i){e.apply(t,[t,i])})),this):this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:null;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,i,s=n(),a=r(),o=this[0];if(!o||void 0===e)return!1;if("string"==typeof e){if(o.matches)return o.matches(e);if(o.webkitMatchesSelector)return o.webkitMatchesSelector(e);if(o.msMatchesSelector)return o.msMatchesSelector(e);for(t=h(e),i=0;i<t.length;i+=1)if(t[i]===o)return!0;return!1}if(e===a)return o===a;if(e===s)return o===s;if(e.nodeType||e instanceof p){for(t=e.nodeType?[e]:e,i=0;i<t.length;i+=1)if(t[i]===o)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t=this.length;if(e>t-1)return h([]);if(e<0){var i=t+e;return h(i<0?[]:[this[i]])}return h([this[e]])},append:function(){for(var e,t=r(),i=0;i<arguments.length;i+=1){e=i<0||arguments.length<=i?void 0:arguments[i];for(var s=0;s<this.length;s+=1)if("string"==typeof e){var n=t.createElement("div");for(n.innerHTML=e;n.firstChild;)this[s].appendChild(n.firstChild)}else if(e instanceof p)for(var a=0;a<e.length;a+=1)this[s].appendChild(e[a]);else this[s].appendChild(e)}return this},prepend:function(e){var t,i,s=r();for(t=0;t<this.length;t+=1)if("string"==typeof e){var n=s.createElement("div");for(n.innerHTML=e,i=n.childNodes.length-1;i>=0;i-=1)this[t].insertBefore(n.childNodes[i],this[t].childNodes[0])}else if(e instanceof p)for(i=0;i<e.length;i+=1)this[t].insertBefore(e[i],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&h(this[0].nextElementSibling).is(e)?h([this[0].nextElementSibling]):h([]):this[0].nextElementSibling?h([this[0].nextElementSibling]):h([]):h([])},nextAll:function(e){var t=[],i=this[0];if(!i)return h([]);for(;i.nextElementSibling;){var r=i.nextElementSibling;e?h(r).is(e)&&t.push(r):t.push(r),i=r}return h(t)},prev:function(e){if(this.length>0){var t=this[0];return e?t.previousElementSibling&&h(t.previousElementSibling).is(e)?h([t.previousElementSibling]):h([]):t.previousElementSibling?h([t.previousElementSibling]):h([])}return h([])},prevAll:function(e){var t=[],i=this[0];if(!i)return h([]);for(;i.previousElementSibling;){var r=i.previousElementSibling;e?h(r).is(e)&&t.push(r):t.push(r),i=r}return h(t)},parent:function(e){for(var t=[],i=0;i<this.length;i+=1)null!==this[i].parentNode&&(e?h(this[i].parentNode).is(e)&&t.push(this[i].parentNode):t.push(this[i].parentNode));return h(t)},parents:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var r=this[i].parentNode;r;)e?h(r).is(e)&&t.push(r):t.push(r),r=r.parentNode;return h(t)},closest:function(e){var t=this;return void 0===e?h([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var r=this[i].querySelectorAll(e),s=0;s<r.length;s+=1)t.push(r[s]);return h(t)},children:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var r=this[i].children,s=0;s<r.length;s+=1)e&&!h(r[s]).is(e)||t.push(r[s]);return h(t)},filter:function(e){return h(v(this,e))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}};Object.keys(g).forEach((function(e){h.fn[e]=g[e]}));const C=h;function w(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function b(){return Date.now()}function T(e){return"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object}function y(){for(var e=Object(arguments.length<=0?void 0:arguments[0]),t=1;t<arguments.length;t+=1){var i=t<0||arguments.length<=t?void 0:arguments[t];if(null!=i)for(var r=Object.keys(Object(i)),s=0,n=r.length;s<n;s+=1){var a=r[s],o=Object.getOwnPropertyDescriptor(i,a);void 0!==o&&o.enumerable&&(T(e[a])&&T(i[a])?y(e[a],i[a]):!T(e[a])&&T(i[a])?(e[a]={},y(e[a],i[a])):e[a]=i[a])}}return e}function S(e,t){Object.keys(t).forEach((function(i){T(t[i])&&Object.keys(t[i]).forEach((function(r){"function"==typeof t[i][r]&&(t[i][r]=t[i][r].bind(e))})),e[i]=t[i]}))}var x,E,M;function P(){return x||(x=function(){var e=n(),t=r();return{touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch),pointerEvents:!!e.PointerEvent&&"maxTouchPoints"in e.navigator&&e.navigator.maxTouchPoints>=0,observer:"MutationObserver"in e||"WebkitMutationObserver"in e,passiveListener:function(){var t=!1;try{var i=Object.defineProperty({},"passive",{get:function(){t=!0}});e.addEventListener("testPassiveListener",null,i)}catch(e){}return t}(),gestures:"ongesturestart"in e}}()),x}function k(e){return void 0===e&&(e={}),E||(E=function(e){var t=(void 0===e?{}:e).userAgent,i=P(),r=n(),s=r.navigator.platform,a=t||r.navigator.userAgent,o={ios:!1,android:!1},l=r.screen.width,d=r.screen.height,u=a.match(/(Android);?[\s\/]+([\d.]+)?/),p=a.match(/(iPad).*OS\s([\d_]+)/),c=a.match(/(iPod)(.*OS\s([\d_]+))?/),v=!p&&a.match(/(iPhone\sOS|iOS)\s([\d_]+)/),h="Win32"===s,f="MacIntel"===s;return!p&&f&&i.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(l+"x"+d)>=0&&((p=a.match(/(Version)\/([\d.]+)/))||(p=[0,1,"13_0_0"]),f=!1),u&&!h&&(o.os="android",o.android=!0),(p||v||c)&&(o.os="ios",o.ios=!0),o}(e)),E}function L(){return M||(M=function(){var e,t=n();return{isEdge:!!t.navigator.userAgent.match(/Edge/g),isSafari:(e=t.navigator.userAgent.toLowerCase(),e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)}}()),M}const O={name:"resize",create:function(){var e=this;y(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(e){var t=n();t.addEventListener("resize",e.resize.resizeHandler),t.addEventListener("orientationchange",e.resize.orientationChangeHandler)},destroy:function(e){var t=n();t.removeEventListener("resize",e.resize.resizeHandler),t.removeEventListener("orientationchange",e.resize.orientationChangeHandler)}}};function A(){return(A=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(e[r]=i[r])}return e}).apply(this,arguments)}var z={attach:function(e,t){void 0===t&&(t={});var i=n(),r=this,s=new(i.MutationObserver||i.WebkitMutationObserver)((function(e){if(1!==e.length){var t=function(){r.emit("observerUpdate",e[0])};i.requestAnimationFrame?i.requestAnimationFrame(t):i.setTimeout(t,0)}else r.emit("observerUpdate",e[0])}));s.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),r.observer.observers.push(s)},init:function(){var e=this;if(e.support.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),i=0;i<t.length;i+=1)e.observer.attach(t[i]);e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach((function(e){e.disconnect()})),this.observer.observers=[]}};const I={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){S(this,{observer:A(A({},z),{},{observers:[]})})},on:{init:function(e){e.observer.init()},destroy:function(e){e.observer.destroy()}}};function B(e){var t=this,i=r(),s=n(),a=t.touchEventsData,o=t.params,l=t.touches;if(!t.animating||!o.preventInteractionOnTransition){var d=e;d.originalEvent&&(d=d.originalEvent);var u=C(d.target);if(("wrapper"!==o.touchEventsTarget||u.closest(t.wrapperEl).length)&&(a.isTouchEvent="touchstart"===d.type,(a.isTouchEvent||!("which"in d)||3!==d.which)&&!(!a.isTouchEvent&&"button"in d&&d.button>0||a.isTouched&&a.isMoved)))if(!!o.noSwipingClass&&""!==o.noSwipingClass&&d.target&&d.target.shadowRoot&&e.path&&e.path[0]&&(u=C(e.path[0])),o.noSwiping&&u.closest(o.noSwipingSelector?o.noSwipingSelector:"."+o.noSwipingClass)[0])t.allowClick=!0;else if(!o.swipeHandler||u.closest(o.swipeHandler)[0]){l.currentX="touchstart"===d.type?d.targetTouches[0].pageX:d.pageX,l.currentY="touchstart"===d.type?d.targetTouches[0].pageY:d.pageY;var p=l.currentX,c=l.currentY,v=o.edgeSwipeDetection||o.iOSEdgeSwipeDetection,h=o.edgeSwipeThreshold||o.iOSEdgeSwipeThreshold;if(!v||!(p<=h||p>=s.screen.width-h)){if(y(a,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=p,l.startY=c,a.touchStartTime=b(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,o.threshold>0&&(a.allowThresholdMove=!1),"touchstart"!==d.type){var f=!0;u.is(a.formElements)&&(f=!1),i.activeElement&&C(i.activeElement).is(a.formElements)&&i.activeElement!==u[0]&&i.activeElement.blur();var m=f&&t.allowTouchMove&&o.touchStartPreventDefault;(o.touchStartForcePreventDefault||m)&&d.preventDefault()}t.emit("touchStart",d)}}}}function D(e){var t=r(),i=this,s=i.touchEventsData,n=i.params,a=i.touches,o=i.rtlTranslate,l=e;if(l.originalEvent&&(l=l.originalEvent),s.isTouched){if(!s.isTouchEvent||"touchmove"===l.type){var d="touchmove"===l.type&&l.targetTouches&&(l.targetTouches[0]||l.changedTouches[0]),u="touchmove"===l.type?d.pageX:l.pageX,p="touchmove"===l.type?d.pageY:l.pageY;if(l.preventedByNestedSwiper)return a.startX=u,void(a.startY=p);if(!i.allowTouchMove)return i.allowClick=!1,void(s.isTouched&&(y(a,{startX:u,startY:p,currentX:u,currentY:p}),s.touchStartTime=b()));if(s.isTouchEvent&&n.touchReleaseOnEdges&&!n.loop)if(i.isVertical()){if(p<a.startY&&i.translate<=i.maxTranslate()||p>a.startY&&i.translate>=i.minTranslate())return s.isTouched=!1,void(s.isMoved=!1)}else if(u<a.startX&&i.translate<=i.maxTranslate()||u>a.startX&&i.translate>=i.minTranslate())return;if(s.isTouchEvent&&t.activeElement&&l.target===t.activeElement&&C(l.target).is(s.formElements))return s.isMoved=!0,void(i.allowClick=!1);if(s.allowTouchCallbacks&&i.emit("touchMove",l),!(l.targetTouches&&l.targetTouches.length>1)){a.currentX=u,a.currentY=p;var c,v=a.currentX-a.startX,h=a.currentY-a.startY;if(!(i.params.threshold&&Math.sqrt(Math.pow(v,2)+Math.pow(h,2))<i.params.threshold))if(void 0===s.isScrolling&&(i.isHorizontal()&&a.currentY===a.startY||i.isVertical()&&a.currentX===a.startX?s.isScrolling=!1:v*v+h*h>=25&&(c=180*Math.atan2(Math.abs(h),Math.abs(v))/Math.PI,s.isScrolling=i.isHorizontal()?c>n.touchAngle:90-c>n.touchAngle)),s.isScrolling&&i.emit("touchMoveOpposite",l),void 0===s.startMoving&&(a.currentX===a.startX&&a.currentY===a.startY||(s.startMoving=!0)),s.isScrolling)s.isTouched=!1;else if(s.startMoving){i.allowClick=!1,!n.cssMode&&l.cancelable&&l.preventDefault(),n.touchMoveStopPropagation&&!n.nested&&l.stopPropagation(),s.isMoved||(n.loop&&i.loopFix(),s.startTranslate=i.getTranslate(),i.setTransition(0),i.animating&&i.$wrapperEl.trigger("webkitTransitionEnd transitionend"),s.allowMomentumBounce=!1,!n.grabCursor||!0!==i.allowSlideNext&&!0!==i.allowSlidePrev||i.setGrabCursor(!0),i.emit("sliderFirstMove",l)),i.emit("sliderMove",l),s.isMoved=!0;var f=i.isHorizontal()?v:h;a.diff=f,f*=n.touchRatio,o&&(f=-f),i.swipeDirection=f>0?"prev":"next",s.currentTranslate=f+s.startTranslate;var m=!0,g=n.resistanceRatio;if(n.touchReleaseOnEdges&&(g=0),f>0&&s.currentTranslate>i.minTranslate()?(m=!1,n.resistance&&(s.currentTranslate=i.minTranslate()-1+Math.pow(-i.minTranslate()+s.startTranslate+f,g))):f<0&&s.currentTranslate<i.maxTranslate()&&(m=!1,n.resistance&&(s.currentTranslate=i.maxTranslate()+1-Math.pow(i.maxTranslate()-s.startTranslate-f,g))),m&&(l.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&s.currentTranslate<s.startTranslate&&(s.currentTranslate=s.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&s.currentTranslate>s.startTranslate&&(s.currentTranslate=s.startTranslate),n.threshold>0){if(!(Math.abs(f)>n.threshold||s.allowThresholdMove))return void(s.currentTranslate=s.startTranslate);if(!s.allowThresholdMove)return s.allowThresholdMove=!0,a.startX=a.currentX,a.startY=a.currentY,s.currentTranslate=s.startTranslate,void(a.diff=i.isHorizontal()?a.currentX-a.startX:a.currentY-a.startY)}n.followFinger&&!n.cssMode&&((n.freeMode||n.watchSlidesProgress||n.watchSlidesVisibility)&&(i.updateActiveIndex(),i.updateSlidesClasses()),n.freeMode&&(0===s.velocities.length&&s.velocities.push({position:a[i.isHorizontal()?"startX":"startY"],time:s.touchStartTime}),s.velocities.push({position:a[i.isHorizontal()?"currentX":"currentY"],time:b()})),i.updateProgress(s.currentTranslate),i.setTranslate(s.currentTranslate))}}}}else s.startMoving&&s.isScrolling&&i.emit("touchMoveOpposite",l)}function G(e){var t=this,i=t.touchEventsData,r=t.params,s=t.touches,n=t.rtlTranslate,a=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,d=e;if(d.originalEvent&&(d=d.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",d),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&r.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);r.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var u,p=b(),c=p-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit("tap click",d),c<300&&p-i.lastClickTime<300&&t.emit("doubleTap doubleClick",d)),i.lastClickTime=b(),w((function(){t.destroyed||(t.allowClick=!0)})),!i.isTouched||!i.isMoved||!t.swipeDirection||0===s.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,u=r.followFinger?n?t.translate:-t.translate:-i.currentTranslate,!r.cssMode)if(r.freeMode){if(u<-t.minTranslate())return void t.slideTo(t.activeIndex);if(u>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(r.freeModeMomentum){if(i.velocities.length>1){var v=i.velocities.pop(),h=i.velocities.pop(),f=v.position-h.position,m=v.time-h.time;t.velocity=f/m,t.velocity/=2,Math.abs(t.velocity)<r.freeModeMinimumVelocity&&(t.velocity=0),(m>150||b()-v.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=r.freeModeMomentumVelocityRatio,i.velocities.length=0;var g=1e3*r.freeModeMomentumRatio,C=t.velocity*g,T=t.translate+C;n&&(T=-T);var y,S,x=!1,E=20*Math.abs(t.velocity)*r.freeModeMomentumBounceRatio;if(T<t.maxTranslate())r.freeModeMomentumBounce?(T+t.maxTranslate()<-E&&(T=t.maxTranslate()-E),y=t.maxTranslate(),x=!0,i.allowMomentumBounce=!0):T=t.maxTranslate(),r.loop&&r.centeredSlides&&(S=!0);else if(T>t.minTranslate())r.freeModeMomentumBounce?(T-t.minTranslate()>E&&(T=t.minTranslate()+E),y=t.minTranslate(),x=!0,i.allowMomentumBounce=!0):T=t.minTranslate(),r.loop&&r.centeredSlides&&(S=!0);else if(r.freeModeSticky){for(var M,P=0;P<l.length;P+=1)if(l[P]>-T){M=P;break}T=-(T=Math.abs(l[M]-T)<Math.abs(l[M-1]-T)||"next"===t.swipeDirection?l[M]:l[M-1])}if(S&&t.once("transitionEnd",(function(){t.loopFix()})),0!==t.velocity){if(g=n?Math.abs((-T-t.translate)/t.velocity):Math.abs((T-t.translate)/t.velocity),r.freeModeSticky){var k=Math.abs((n?-T:T)-t.translate),L=t.slidesSizesGrid[t.activeIndex];g=k<L?r.speed:k<2*L?1.5*r.speed:2.5*r.speed}}else if(r.freeModeSticky)return void t.slideToClosest();r.freeModeMomentumBounce&&x?(t.updateProgress(y),t.setTransition(g),t.setTranslate(T),t.transitionStart(!0,t.swipeDirection),t.animating=!0,a.transitionEnd((function(){t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(r.speed),setTimeout((function(){t.setTranslate(y),a.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()}))}),0))}))):t.velocity?(t.updateProgress(T),t.setTransition(g),t.setTranslate(T),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,a.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()})))):t.updateProgress(T),t.updateActiveIndex(),t.updateSlidesClasses()}else if(r.freeModeSticky)return void t.slideToClosest();(!r.freeModeMomentum||c>=r.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var O=0,A=t.slidesSizesGrid[0],z=0;z<o.length;z+=z<r.slidesPerGroupSkip?1:r.slidesPerGroup){var I=z<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;void 0!==o[z+I]?u>=o[z]&&u<o[z+I]&&(O=z,A=o[z+I]-o[z]):u>=o[z]&&(O=z,A=o[o.length-1]-o[o.length-2])}var B=(u-o[O])/A,D=O<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;if(c>r.longSwipesMs){if(!r.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(B>=r.longSwipesRatio?t.slideTo(O+D):t.slideTo(O)),"prev"===t.swipeDirection&&(B>1-r.longSwipesRatio?t.slideTo(O+D):t.slideTo(O))}else{if(!r.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||d.target!==t.navigation.nextEl&&d.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(O+D),"prev"===t.swipeDirection&&t.slideTo(O)):d.target===t.navigation.nextEl?t.slideTo(O+D):t.slideTo(O)}}}function N(){var e=this,t=e.params,i=e.el;if(!i||0!==i.offsetWidth){t.breakpoints&&e.setBreakpoint();var r=e.allowSlideNext,s=e.allowSlidePrev,n=e.snapGrid;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses(),("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.isBeginning&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.run(),e.allowSlidePrev=s,e.allowSlideNext=r,e.params.watchOverflow&&n!==e.snapGrid&&e.checkOverflow()}}function $(e){var t=this;t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}function H(){var e=this,t=e.wrapperEl,i=e.rtlTranslate;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=i?t.scrollWidth-t.offsetWidth-t.scrollLeft:-t.scrollLeft:e.translate=-t.scrollTop,-0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();var r=e.maxTranslate()-e.minTranslate();(0===r?0:(e.translate-e.minTranslate())/r)!==e.progress&&e.updateProgress(i?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}var F=!1;function V(){}const j={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,nested:!1,width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0,_emitClasses:!1};function _(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var W={modular:{useParams:function(e){var t=this;t.modules&&Object.keys(t.modules).forEach((function(i){var r=t.modules[i];r.params&&y(e,r.params)}))},useModules:function(e){void 0===e&&(e={});var t=this;t.modules&&Object.keys(t.modules).forEach((function(i){var r=t.modules[i],s=e[i]||{};r.on&&t.on&&Object.keys(r.on).forEach((function(e){t.on(e,r.on[e])})),r.create&&r.create.bind(t)(s)}))}},eventsEmitter:{on:function(e,t,i){var r=this;if("function"!=typeof t)return r;var s=i?"unshift":"push";return e.split(" ").forEach((function(e){r.eventsListeners[e]||(r.eventsListeners[e]=[]),r.eventsListeners[e][s](t)})),r},once:function(e,t,i){var r=this;if("function"!=typeof t)return r;function s(){r.off(e,s),s.__emitterProxy&&delete s.__emitterProxy;for(var i=arguments.length,n=new Array(i),a=0;a<i;a++)n[a]=arguments[a];t.apply(r,n)}return s.__emitterProxy=t,r.on(e,s,i)},onAny:function(e,t){var i=this;if("function"!=typeof e)return i;var r=t?"unshift":"push";return i.eventsAnyListeners.indexOf(e)<0&&i.eventsAnyListeners[r](e),i},offAny:function(e){var t=this;if(!t.eventsAnyListeners)return t;var i=t.eventsAnyListeners.indexOf(e);return i>=0&&t.eventsAnyListeners.splice(i,1),t},off:function(e,t){var i=this;return i.eventsListeners?(e.split(" ").forEach((function(e){void 0===t?i.eventsListeners[e]=[]:i.eventsListeners[e]&&i.eventsListeners[e].forEach((function(r,s){(r===t||r.__emitterProxy&&r.__emitterProxy===t)&&i.eventsListeners[e].splice(s,1)}))})),i):i},emit:function(){var e,t,i,r=this;if(!r.eventsListeners)return r;for(var s=arguments.length,n=new Array(s),a=0;a<s;a++)n[a]=arguments[a];"string"==typeof n[0]||Array.isArray(n[0])?(e=n[0],t=n.slice(1,n.length),i=r):(e=n[0].events,t=n[0].data,i=n[0].context||r),t.unshift(i);var o=Array.isArray(e)?e:e.split(" ");return o.forEach((function(e){if(r.eventsAnyListeners&&r.eventsAnyListeners.length&&r.eventsAnyListeners.forEach((function(r){r.apply(i,[e].concat(t))})),r.eventsListeners&&r.eventsListeners[e]){var s=[];r.eventsListeners[e].forEach((function(e){s.push(e)})),s.forEach((function(e){e.apply(i,t)}))}})),r}},update:{updateSize:function(){var e,t,i=this,r=i.$el;e=void 0!==i.params.width&&null!==i.params.width?i.params.width:r[0].clientWidth,t=void 0!==i.params.height&&null!==i.params.width?i.params.height:r[0].clientHeight,0===e&&i.isHorizontal()||0===t&&i.isVertical()||(e=e-parseInt(r.css("padding-left")||0,10)-parseInt(r.css("padding-right")||0,10),t=t-parseInt(r.css("padding-top")||0,10)-parseInt(r.css("padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(t)&&(t=0),y(i,{width:e,height:t,size:i.isHorizontal()?e:t}))},updateSlides:function(){var e=this,t=n(),i=e.params,r=e.$wrapperEl,s=e.size,a=e.rtlTranslate,o=e.wrongRTL,l=e.virtual&&i.virtual.enabled,d=l?e.virtual.slides.length:e.slides.length,u=r.children("."+e.params.slideClass),p=l?e.virtual.slides.length:u.length,c=[],v=[],h=[];function f(e,t){return!i.cssMode||t!==u.length-1}var m=i.slidesOffsetBefore;"function"==typeof m&&(m=i.slidesOffsetBefore.call(e));var g=i.slidesOffsetAfter;"function"==typeof g&&(g=i.slidesOffsetAfter.call(e));var C=e.snapGrid.length,w=e.snapGrid.length,b=i.spaceBetween,T=-m,S=0,x=0;if(void 0!==s){var E,M;"string"==typeof b&&b.indexOf("%")>=0&&(b=parseFloat(b.replace("%",""))/100*s),e.virtualSize=-b,a?u.css({marginLeft:"",marginTop:""}):u.css({marginRight:"",marginBottom:""}),i.slidesPerColumn>1&&(E=Math.floor(p/i.slidesPerColumn)===p/e.params.slidesPerColumn?p:Math.ceil(p/i.slidesPerColumn)*i.slidesPerColumn,"auto"!==i.slidesPerView&&"row"===i.slidesPerColumnFill&&(E=Math.max(E,i.slidesPerView*i.slidesPerColumn)));for(var P,k=i.slidesPerColumn,L=E/k,O=Math.floor(p/i.slidesPerColumn),A=0;A<p;A+=1){M=0;var z=u.eq(A);if(i.slidesPerColumn>1){var I=void 0,B=void 0,D=void 0;if("row"===i.slidesPerColumnFill&&i.slidesPerGroup>1){var G=Math.floor(A/(i.slidesPerGroup*i.slidesPerColumn)),N=A-i.slidesPerColumn*i.slidesPerGroup*G,$=0===G?i.slidesPerGroup:Math.min(Math.ceil((p-G*k*i.slidesPerGroup)/k),i.slidesPerGroup);I=(B=N-(D=Math.floor(N/$))*$+G*i.slidesPerGroup)+D*E/k,z.css({"-webkit-box-ordinal-group":I,"-moz-box-ordinal-group":I,"-ms-flex-order":I,"-webkit-order":I,order:I})}else"column"===i.slidesPerColumnFill?(D=A-(B=Math.floor(A/k))*k,(B>O||B===O&&D===k-1)&&(D+=1)>=k&&(D=0,B+=1)):B=A-(D=Math.floor(A/L))*L;z.css("margin-"+(e.isHorizontal()?"top":"left"),0!==D&&i.spaceBetween&&i.spaceBetween+"px")}if("none"!==z.css("display")){if("auto"===i.slidesPerView){var H=t.getComputedStyle(z[0],null),F=z[0].style.transform,V=z[0].style.webkitTransform;if(F&&(z[0].style.transform="none"),V&&(z[0].style.webkitTransform="none"),i.roundLengths)M=e.isHorizontal()?z.outerWidth(!0):z.outerHeight(!0);else if(e.isHorizontal()){var j=parseFloat(H.getPropertyValue("width")||0),_=parseFloat(H.getPropertyValue("padding-left")||0),W=parseFloat(H.getPropertyValue("padding-right")||0),R=parseFloat(H.getPropertyValue("margin-left")||0),q=parseFloat(H.getPropertyValue("margin-right")||0),X=H.getPropertyValue("box-sizing");if(X&&"border-box"===X)M=j+R+q;else{var Y=z[0],U=Y.clientWidth;M=j+_+W+R+q+(Y.offsetWidth-U)}}else{var K=parseFloat(H.getPropertyValue("height")||0),J=parseFloat(H.getPropertyValue("padding-top")||0),Q=parseFloat(H.getPropertyValue("padding-bottom")||0),Z=parseFloat(H.getPropertyValue("margin-top")||0),ee=parseFloat(H.getPropertyValue("margin-bottom")||0),te=H.getPropertyValue("box-sizing");if(te&&"border-box"===te)M=K+Z+ee;else{var ie=z[0],re=ie.clientHeight;M=K+J+Q+Z+ee+(ie.offsetHeight-re)}}F&&(z[0].style.transform=F),V&&(z[0].style.webkitTransform=V),i.roundLengths&&(M=Math.floor(M))}else M=(s-(i.slidesPerView-1)*b)/i.slidesPerView,i.roundLengths&&(M=Math.floor(M)),u[A]&&(e.isHorizontal()?u[A].style.width=M+"px":u[A].style.height=M+"px");u[A]&&(u[A].swiperSlideSize=M),h.push(M),i.centeredSlides?(T=T+M/2+S/2+b,0===S&&0!==A&&(T=T-s/2-b),0===A&&(T=T-s/2-b),Math.abs(T)<.001&&(T=0),i.roundLengths&&(T=Math.floor(T)),x%i.slidesPerGroup==0&&c.push(T),v.push(T)):(i.roundLengths&&(T=Math.floor(T)),(x-Math.min(e.params.slidesPerGroupSkip,x))%e.params.slidesPerGroup==0&&c.push(T),v.push(T),T=T+M+b),e.virtualSize+=M+b,S=M,x+=1}}if(e.virtualSize=Math.max(e.virtualSize,s)+g,a&&o&&("slide"===i.effect||"coverflow"===i.effect)&&r.css({width:e.virtualSize+i.spaceBetween+"px"}),i.setWrapperSize&&(e.isHorizontal()?r.css({width:e.virtualSize+i.spaceBetween+"px"}):r.css({height:e.virtualSize+i.spaceBetween+"px"})),i.slidesPerColumn>1&&(e.virtualSize=(M+i.spaceBetween)*E,e.virtualSize=Math.ceil(e.virtualSize/i.slidesPerColumn)-i.spaceBetween,e.isHorizontal()?r.css({width:e.virtualSize+i.spaceBetween+"px"}):r.css({height:e.virtualSize+i.spaceBetween+"px"}),i.centeredSlides)){P=[];for(var se=0;se<c.length;se+=1){var ne=c[se];i.roundLengths&&(ne=Math.floor(ne)),c[se]<e.virtualSize+c[0]&&P.push(ne)}c=P}if(!i.centeredSlides){P=[];for(var ae=0;ae<c.length;ae+=1){var oe=c[ae];i.roundLengths&&(oe=Math.floor(oe)),c[ae]<=e.virtualSize-s&&P.push(oe)}c=P,Math.floor(e.virtualSize-s)-Math.floor(c[c.length-1])>1&&c.push(e.virtualSize-s)}if(0===c.length&&(c=[0]),0!==i.spaceBetween&&(e.isHorizontal()?a?u.filter(f).css({marginLeft:b+"px"}):u.filter(f).css({marginRight:b+"px"}):u.filter(f).css({marginBottom:b+"px"})),i.centeredSlides&&i.centeredSlidesBounds){var le=0;h.forEach((function(e){le+=e+(i.spaceBetween?i.spaceBetween:0)}));var de=(le-=i.spaceBetween)-s;c=c.map((function(e){return e<0?-m:e>de?de+g:e}))}if(i.centerInsufficientSlides){var ue=0;if(h.forEach((function(e){ue+=e+(i.spaceBetween?i.spaceBetween:0)})),(ue-=i.spaceBetween)<s){var pe=(s-ue)/2;c.forEach((function(e,t){c[t]=e-pe})),v.forEach((function(e,t){v[t]=e+pe}))}}y(e,{slides:u,snapGrid:c,slidesGrid:v,slidesSizesGrid:h}),p!==d&&e.emit("slidesLengthChange"),c.length!==C&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),v.length!==w&&e.emit("slidesGridLengthChange"),(i.watchSlidesProgress||i.watchSlidesVisibility)&&e.updateSlidesOffset()}},updateAutoHeight:function(e){var t,i=this,r=[],s=0;if("number"==typeof e?i.setTransition(e):!0===e&&i.setTransition(i.params.speed),"auto"!==i.params.slidesPerView&&i.params.slidesPerView>1)if(i.params.centeredSlides)i.visibleSlides.each((function(e){r.push(e)}));else for(t=0;t<Math.ceil(i.params.slidesPerView);t+=1){var n=i.activeIndex+t;if(n>i.slides.length)break;r.push(i.slides.eq(n)[0])}else r.push(i.slides.eq(i.activeIndex)[0]);for(t=0;t<r.length;t+=1)if(void 0!==r[t]){var a=r[t].offsetHeight;s=a>s?a:s}s&&i.$wrapperEl.css("height",s+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,i=t.params,r=t.slides,s=t.rtlTranslate;if(0!==r.length){void 0===r[0].swiperSlideOffset&&t.updateSlidesOffset();var n=-e;s&&(n=e),r.removeClass(i.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(var a=0;a<r.length;a+=1){var o=r[a],l=(n+(i.centeredSlides?t.minTranslate():0)-o.swiperSlideOffset)/(o.swiperSlideSize+i.spaceBetween);if(i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight){var d=-(n-o.swiperSlideOffset),u=d+t.slidesSizesGrid[a];(d>=0&&d<t.size-1||u>1&&u<=t.size||d<=0&&u>=t.size)&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(a),r.eq(a).addClass(i.slideVisibleClass))}o.progress=s?-l:l}t.visibleSlides=C(t.visibleSlides)}},updateProgress:function(e){var t=this;if(void 0===e){var i=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*i||0}var r=t.params,s=t.maxTranslate()-t.minTranslate(),n=t.progress,a=t.isBeginning,o=t.isEnd,l=a,d=o;0===s?(n=0,a=!0,o=!0):(a=(n=(e-t.minTranslate())/s)<=0,o=n>=1),y(t,{progress:n,isBeginning:a,isEnd:o}),(r.watchSlidesProgress||r.watchSlidesVisibility||r.centeredSlides&&r.autoHeight)&&t.updateSlidesProgress(e),a&&!l&&t.emit("reachBeginning toEdge"),o&&!d&&t.emit("reachEnd toEdge"),(l&&!a||d&&!o)&&t.emit("fromEdge"),t.emit("progress",n)},updateSlidesClasses:function(){var e,t=this,i=t.slides,r=t.params,s=t.$wrapperEl,n=t.activeIndex,a=t.realIndex,o=t.virtual&&r.virtual.enabled;i.removeClass(r.slideActiveClass+" "+r.slideNextClass+" "+r.slidePrevClass+" "+r.slideDuplicateActiveClass+" "+r.slideDuplicateNextClass+" "+r.slideDuplicatePrevClass),(e=o?t.$wrapperEl.find("."+r.slideClass+'[data-swiper-slide-index="'+n+'"]'):i.eq(n)).addClass(r.slideActiveClass),r.loop&&(e.hasClass(r.slideDuplicateClass)?s.children("."+r.slideClass+":not(."+r.slideDuplicateClass+')[data-swiper-slide-index="'+a+'"]').addClass(r.slideDuplicateActiveClass):s.children("."+r.slideClass+"."+r.slideDuplicateClass+'[data-swiper-slide-index="'+a+'"]').addClass(r.slideDuplicateActiveClass));var l=e.nextAll("."+r.slideClass).eq(0).addClass(r.slideNextClass);r.loop&&0===l.length&&(l=i.eq(0)).addClass(r.slideNextClass);var d=e.prevAll("."+r.slideClass).eq(0).addClass(r.slidePrevClass);r.loop&&0===d.length&&(d=i.eq(-1)).addClass(r.slidePrevClass),r.loop&&(l.hasClass(r.slideDuplicateClass)?s.children("."+r.slideClass+":not(."+r.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(r.slideDuplicateNextClass):s.children("."+r.slideClass+"."+r.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(r.slideDuplicateNextClass),d.hasClass(r.slideDuplicateClass)?s.children("."+r.slideClass+":not(."+r.slideDuplicateClass+')[data-swiper-slide-index="'+d.attr("data-swiper-slide-index")+'"]').addClass(r.slideDuplicatePrevClass):s.children("."+r.slideClass+"."+r.slideDuplicateClass+'[data-swiper-slide-index="'+d.attr("data-swiper-slide-index")+'"]').addClass(r.slideDuplicatePrevClass)),t.emitSlidesClasses()},updateActiveIndex:function(e){var t,i=this,r=i.rtlTranslate?i.translate:-i.translate,s=i.slidesGrid,n=i.snapGrid,a=i.params,o=i.activeIndex,l=i.realIndex,d=i.snapIndex,u=e;if(void 0===u){for(var p=0;p<s.length;p+=1)void 0!==s[p+1]?r>=s[p]&&r<s[p+1]-(s[p+1]-s[p])/2?u=p:r>=s[p]&&r<s[p+1]&&(u=p+1):r>=s[p]&&(u=p);a.normalizeSlideIndex&&(u<0||void 0===u)&&(u=0)}if(n.indexOf(r)>=0)t=n.indexOf(r);else{var c=Math.min(a.slidesPerGroupSkip,u);t=c+Math.floor((u-c)/a.slidesPerGroup)}if(t>=n.length&&(t=n.length-1),u!==o){var v=parseInt(i.slides.eq(u).attr("data-swiper-slide-index")||u,10);y(i,{snapIndex:t,realIndex:v,previousIndex:o,activeIndex:u}),i.emit("activeIndexChange"),i.emit("snapIndexChange"),l!==v&&i.emit("realIndexChange"),(i.initialized||i.params.runCallbacksOnInit)&&i.emit("slideChange")}else t!==d&&(i.snapIndex=t,i.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this,i=t.params,r=C(e.target).closest("."+i.slideClass)[0],s=!1;if(r)for(var n=0;n<t.slides.length;n+=1)t.slides[n]===r&&(s=!0);if(!r||!s)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=r,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(C(r).attr("data-swiper-slide-index"),10):t.clickedIndex=C(r).index(),i.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}},translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this,i=t.params,r=t.rtlTranslate,s=t.translate,a=t.$wrapperEl;if(i.virtualTranslate)return r?-s:s;if(i.cssMode)return s;var o=function(e,t){void 0===t&&(t="x");var i,r,s,a=n(),o=a.getComputedStyle(e,null);return a.WebKitCSSMatrix?((r=o.transform||o.webkitTransform).split(",").length>6&&(r=r.split(", ").map((function(e){return e.replace(",",".")})).join(", ")),s=new a.WebKitCSSMatrix("none"===r?"":r)):i=(s=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(r=a.WebKitCSSMatrix?s.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(r=a.WebKitCSSMatrix?s.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),r||0}(a[0],e);return r&&(o=-o),o||0},setTranslate:function(e,t){var i=this,r=i.rtlTranslate,s=i.params,n=i.$wrapperEl,a=i.wrapperEl,o=i.progress,l=0,d=0;i.isHorizontal()?l=r?-e:e:d=e,s.roundLengths&&(l=Math.floor(l),d=Math.floor(d)),s.cssMode?a[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-l:-d:s.virtualTranslate||n.transform("translate3d("+l+"px, "+d+"px, 0px)"),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?l:d;var u=i.maxTranslate()-i.minTranslate();(0===u?0:(e-i.minTranslate())/u)!==o&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,i,r,s){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),void 0===r&&(r=!0);var n=this,a=n.params,o=n.wrapperEl;if(n.animating&&a.preventInteractionOnTransition)return!1;var l,d=n.minTranslate(),u=n.maxTranslate();if(l=r&&e>d?d:r&&e<u?u:e,n.updateProgress(l),a.cssMode){var p,c=n.isHorizontal();return 0===t?o[c?"scrollLeft":"scrollTop"]=-l:o.scrollTo?o.scrollTo(((p={})[c?"left":"top"]=-l,p.behavior="smooth",p)):o[c?"scrollLeft":"scrollTop"]=-l,!0}return 0===t?(n.setTransition(0),n.setTranslate(l),i&&(n.emit("beforeTransitionStart",t,s),n.emit("transitionEnd"))):(n.setTransition(t),n.setTranslate(l),i&&(n.emit("beforeTransitionStart",t,s),n.emit("transitionStart")),n.animating||(n.animating=!0,n.onTranslateToWrapperTransitionEnd||(n.onTranslateToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.$wrapperEl[0].removeEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.$wrapperEl[0].removeEventListener("webkitTransitionEnd",n.onTranslateToWrapperTransitionEnd),n.onTranslateToWrapperTransitionEnd=null,delete n.onTranslateToWrapperTransitionEnd,i&&n.emit("transitionEnd"))}),n.$wrapperEl[0].addEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.$wrapperEl[0].addEventListener("webkitTransitionEnd",n.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){var i=this;i.params.cssMode||i.$wrapperEl.transition(e),i.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var i=this,r=i.activeIndex,s=i.params,n=i.previousIndex;if(!s.cssMode){s.autoHeight&&i.updateAutoHeight();var a=t;if(a||(a=r>n?"next":r<n?"prev":"reset"),i.emit("transitionStart"),e&&r!==n){if("reset"===a)return void i.emit("slideResetTransitionStart");i.emit("slideChangeTransitionStart"),"next"===a?i.emit("slideNextTransitionStart"):i.emit("slidePrevTransitionStart")}}},transitionEnd:function(e,t){void 0===e&&(e=!0);var i=this,r=i.activeIndex,s=i.previousIndex,n=i.params;if(i.animating=!1,!n.cssMode){i.setTransition(0);var a=t;if(a||(a=r>s?"next":r<s?"prev":"reset"),i.emit("transitionEnd"),e&&r!==s){if("reset"===a)return void i.emit("slideResetTransitionEnd");i.emit("slideChangeTransitionEnd"),"next"===a?i.emit("slideNextTransitionEnd"):i.emit("slidePrevTransitionEnd")}}}},slide:{slideTo:function(e,t,i,r){if(void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),"number"!=typeof e&&"string"!=typeof e)throw new Error("The 'index' argument cannot have type other than 'number' or 'string'. ["+typeof e+"] given.");if("string"==typeof e){var s=parseInt(e,10);if(!isFinite(s))throw new Error("The passed-in 'index' (string) couldn't be converted to 'number'. ["+e+"] given.");e=s}var n=this,a=e;a<0&&(a=0);var o=n.params,l=n.snapGrid,d=n.slidesGrid,u=n.previousIndex,p=n.activeIndex,c=n.rtlTranslate,v=n.wrapperEl;if(n.animating&&o.preventInteractionOnTransition)return!1;var h=Math.min(n.params.slidesPerGroupSkip,a),f=h+Math.floor((a-h)/n.params.slidesPerGroup);f>=l.length&&(f=l.length-1),(p||o.initialSlide||0)===(u||0)&&i&&n.emit("beforeSlideChangeStart");var m,g=-l[f];if(n.updateProgress(g),o.normalizeSlideIndex)for(var C=0;C<d.length;C+=1)-Math.floor(100*g)>=Math.floor(100*d[C])&&(a=C);if(n.initialized&&a!==p){if(!n.allowSlideNext&&g<n.translate&&g<n.minTranslate())return!1;if(!n.allowSlidePrev&&g>n.translate&&g>n.maxTranslate()&&(p||0)!==a)return!1}if(m=a>p?"next":a<p?"prev":"reset",c&&-g===n.translate||!c&&g===n.translate)return n.updateActiveIndex(a),o.autoHeight&&n.updateAutoHeight(),n.updateSlidesClasses(),"slide"!==o.effect&&n.setTranslate(g),"reset"!==m&&(n.transitionStart(i,m),n.transitionEnd(i,m)),!1;if(o.cssMode){var w,b=n.isHorizontal(),T=-g;return c&&(T=v.scrollWidth-v.offsetWidth-T),0===t?v[b?"scrollLeft":"scrollTop"]=T:v.scrollTo?v.scrollTo(((w={})[b?"left":"top"]=T,w.behavior="smooth",w)):v[b?"scrollLeft":"scrollTop"]=T,!0}return 0===t?(n.setTransition(0),n.setTranslate(g),n.updateActiveIndex(a),n.updateSlidesClasses(),n.emit("beforeTransitionStart",t,r),n.transitionStart(i,m),n.transitionEnd(i,m)):(n.setTransition(t),n.setTranslate(g),n.updateActiveIndex(a),n.updateSlidesClasses(),n.emit("beforeTransitionStart",t,r),n.transitionStart(i,m),n.animating||(n.animating=!0,n.onSlideToWrapperTransitionEnd||(n.onSlideToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.$wrapperEl[0].removeEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.$wrapperEl[0].removeEventListener("webkitTransitionEnd",n.onSlideToWrapperTransitionEnd),n.onSlideToWrapperTransitionEnd=null,delete n.onSlideToWrapperTransitionEnd,n.transitionEnd(i,m))}),n.$wrapperEl[0].addEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.$wrapperEl[0].addEventListener("webkitTransitionEnd",n.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e,t,i,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var s=this,n=e;return s.params.loop&&(n+=s.loopedSlides),s.slideTo(n,t,i,r)},slideNext:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var r=this,s=r.params,n=r.animating,a=r.activeIndex<s.slidesPerGroupSkip?1:s.slidesPerGroup;if(s.loop){if(n&&s.loopPreventsSlide)return!1;r.loopFix(),r._clientLeft=r.$wrapperEl[0].clientLeft}return r.slideTo(r.activeIndex+a,e,t,i)},slidePrev:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var r=this,s=r.params,n=r.animating,a=r.snapGrid,o=r.slidesGrid,l=r.rtlTranslate;if(s.loop){if(n&&s.loopPreventsSlide)return!1;r.loopFix(),r._clientLeft=r.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var u,p=d(l?r.translate:-r.translate),c=a.map((function(e){return d(e)})),v=(a[c.indexOf(p)],a[c.indexOf(p)-1]);return void 0===v&&s.cssMode&&a.forEach((function(e){!v&&p>=e&&(v=e)})),void 0!==v&&(u=o.indexOf(v))<0&&(u=r.activeIndex-1),r.slideTo(u,e,t,i)},slideReset:function(e,t,i){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,i)},slideToClosest:function(e,t,i,r){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===r&&(r=.5);var s=this,n=s.activeIndex,a=Math.min(s.params.slidesPerGroupSkip,n),o=a+Math.floor((n-a)/s.params.slidesPerGroup),l=s.rtlTranslate?s.translate:-s.translate;if(l>=s.snapGrid[o]){var d=s.snapGrid[o];l-d>(s.snapGrid[o+1]-d)*r&&(n+=s.params.slidesPerGroup)}else{var u=s.snapGrid[o-1];l-u<=(s.snapGrid[o]-u)*r&&(n-=s.params.slidesPerGroup)}return n=Math.max(n,0),n=Math.min(n,s.slidesGrid.length-1),s.slideTo(n,e,t,i)},slideToClickedSlide:function(){var e,t=this,i=t.params,r=t.$wrapperEl,s="auto"===i.slidesPerView?t.slidesPerViewDynamic():i.slidesPerView,n=t.clickedIndex;if(i.loop){if(t.animating)return;e=parseInt(C(t.clickedSlide).attr("data-swiper-slide-index"),10),i.centeredSlides?n<t.loopedSlides-s/2||n>t.slides.length-t.loopedSlides+s/2?(t.loopFix(),n=r.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),w((function(){t.slideTo(n)}))):t.slideTo(n):n>t.slides.length-s?(t.loopFix(),n=r.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),w((function(){t.slideTo(n)}))):t.slideTo(n)}else t.slideTo(n)}},loop:{loopCreate:function(){var e=this,t=r(),i=e.params,s=e.$wrapperEl;s.children("."+i.slideClass+"."+i.slideDuplicateClass).remove();var n=s.children("."+i.slideClass);if(i.loopFillGroupWithBlank){var a=i.slidesPerGroup-n.length%i.slidesPerGroup;if(a!==i.slidesPerGroup){for(var o=0;o<a;o+=1){var l=C(t.createElement("div")).addClass(i.slideClass+" "+i.slideBlankClass);s.append(l)}n=s.children("."+i.slideClass)}}"auto"!==i.slidesPerView||i.loopedSlides||(i.loopedSlides=n.length),e.loopedSlides=Math.ceil(parseFloat(i.loopedSlides||i.slidesPerView,10)),e.loopedSlides+=i.loopAdditionalSlides,e.loopedSlides>n.length&&(e.loopedSlides=n.length);var d=[],u=[];n.each((function(t,i){var r=C(t);i<e.loopedSlides&&u.push(t),i<n.length&&i>=n.length-e.loopedSlides&&d.push(t),r.attr("data-swiper-slide-index",i)}));for(var p=0;p<u.length;p+=1)s.append(C(u[p].cloneNode(!0)).addClass(i.slideDuplicateClass));for(var c=d.length-1;c>=0;c-=1)s.prepend(C(d[c].cloneNode(!0)).addClass(i.slideDuplicateClass))},loopFix:function(){var e=this;e.emit("beforeLoopFix");var t,i=e.activeIndex,r=e.slides,s=e.loopedSlides,n=e.allowSlidePrev,a=e.allowSlideNext,o=e.snapGrid,l=e.rtlTranslate;e.allowSlidePrev=!0,e.allowSlideNext=!0;var d=-o[i]-e.getTranslate();i<s?(t=r.length-3*s+i,t+=s,e.slideTo(t,0,!1,!0)&&0!==d&&e.setTranslate((l?-e.translate:e.translate)-d)):i>=r.length-s&&(t=-r.length+i+s,t+=s,e.slideTo(t,0,!1,!0)&&0!==d&&e.setTranslate((l?-e.translate:e.translate)-d)),e.allowSlidePrev=n,e.allowSlideNext=a,e.emit("loopFix")},loopDestroy:function(){var e=this,t=e.$wrapperEl,i=e.params,r=e.slides;t.children("."+i.slideClass+"."+i.slideDuplicateClass+",."+i.slideClass+"."+i.slideBlankClass).remove(),r.removeAttr("data-swiper-slide-index")}},grabCursor:{setGrabCursor:function(e){var t=this;if(!(t.support.touch||!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)){var i=t.el;i.style.cursor="move",i.style.cursor=e?"-webkit-grabbing":"-webkit-grab",i.style.cursor=e?"-moz-grabbin":"-moz-grab",i.style.cursor=e?"grabbing":"grab"}},unsetGrabCursor:function(){var e=this;e.support.touch||e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.el.style.cursor="")}},manipulation:{appendSlide:function(e){var t=this,i=t.$wrapperEl,r=t.params;if(r.loop&&t.loopDestroy(),"object"==typeof e&&"length"in e)for(var s=0;s<e.length;s+=1)e[s]&&i.append(e[s]);else i.append(e);r.loop&&t.loopCreate(),r.observer&&t.support.observer||t.update()},prependSlide:function(e){var t=this,i=t.params,r=t.$wrapperEl,s=t.activeIndex;i.loop&&t.loopDestroy();var n=s+1;if("object"==typeof e&&"length"in e){for(var a=0;a<e.length;a+=1)e[a]&&r.prepend(e[a]);n=s+e.length}else r.prepend(e);i.loop&&t.loopCreate(),i.observer&&t.support.observer||t.update(),t.slideTo(n,0,!1)},addSlide:function(e,t){var i=this,r=i.$wrapperEl,s=i.params,n=i.activeIndex;s.loop&&(n-=i.loopedSlides,i.loopDestroy(),i.slides=r.children("."+s.slideClass));var a=i.slides.length;if(e<=0)i.prependSlide(t);else if(e>=a)i.appendSlide(t);else{for(var o=n>e?n+1:n,l=[],d=a-1;d>=e;d-=1){var u=i.slides.eq(d);u.remove(),l.unshift(u)}if("object"==typeof t&&"length"in t){for(var p=0;p<t.length;p+=1)t[p]&&r.append(t[p]);o=n>e?n+t.length:n}else r.append(t);for(var c=0;c<l.length;c+=1)r.append(l[c]);s.loop&&i.loopCreate(),s.observer&&i.support.observer||i.update(),s.loop?i.slideTo(o+i.loopedSlides,0,!1):i.slideTo(o,0,!1)}},removeSlide:function(e){var t=this,i=t.params,r=t.$wrapperEl,s=t.activeIndex;i.loop&&(s-=t.loopedSlides,t.loopDestroy(),t.slides=r.children("."+i.slideClass));var n,a=s;if("object"==typeof e&&"length"in e){for(var o=0;o<e.length;o+=1)n=e[o],t.slides[n]&&t.slides.eq(n).remove(),n<a&&(a-=1);a=Math.max(a,0)}else n=e,t.slides[n]&&t.slides.eq(n).remove(),n<a&&(a-=1),a=Math.max(a,0);i.loop&&t.loopCreate(),i.observer&&t.support.observer||t.update(),i.loop?t.slideTo(a+t.loopedSlides,0,!1):t.slideTo(a,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},events:{attachEvents:function(){var e=this,t=r(),i=e.params,s=e.touchEvents,n=e.el,a=e.wrapperEl,o=e.device,l=e.support;e.onTouchStart=B.bind(e),e.onTouchMove=D.bind(e),e.onTouchEnd=G.bind(e),i.cssMode&&(e.onScroll=H.bind(e)),e.onClick=$.bind(e);var d=!!i.nested;if(!l.touch&&l.pointerEvents)n.addEventListener(s.start,e.onTouchStart,!1),t.addEventListener(s.move,e.onTouchMove,d),t.addEventListener(s.end,e.onTouchEnd,!1);else{if(l.touch){var u=!("touchstart"!==s.start||!l.passiveListener||!i.passiveListeners)&&{passive:!0,capture:!1};n.addEventListener(s.start,e.onTouchStart,u),n.addEventListener(s.move,e.onTouchMove,l.passiveListener?{passive:!1,capture:d}:d),n.addEventListener(s.end,e.onTouchEnd,u),s.cancel&&n.addEventListener(s.cancel,e.onTouchEnd,u),F||(t.addEventListener("touchstart",V),F=!0)}(i.simulateTouch&&!o.ios&&!o.android||i.simulateTouch&&!l.touch&&o.ios)&&(n.addEventListener("mousedown",e.onTouchStart,!1),t.addEventListener("mousemove",e.onTouchMove,d),t.addEventListener("mouseup",e.onTouchEnd,!1))}(i.preventClicks||i.preventClicksPropagation)&&n.addEventListener("click",e.onClick,!0),i.cssMode&&a.addEventListener("scroll",e.onScroll),i.updateOnWindowResize?e.on(o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",N,!0):e.on("observerUpdate",N,!0)},detachEvents:function(){var e=this,t=r(),i=e.params,s=e.touchEvents,n=e.el,a=e.wrapperEl,o=e.device,l=e.support,d=!!i.nested;if(!l.touch&&l.pointerEvents)n.removeEventListener(s.start,e.onTouchStart,!1),t.removeEventListener(s.move,e.onTouchMove,d),t.removeEventListener(s.end,e.onTouchEnd,!1);else{if(l.touch){var u=!("onTouchStart"!==s.start||!l.passiveListener||!i.passiveListeners)&&{passive:!0,capture:!1};n.removeEventListener(s.start,e.onTouchStart,u),n.removeEventListener(s.move,e.onTouchMove,d),n.removeEventListener(s.end,e.onTouchEnd,u),s.cancel&&n.removeEventListener(s.cancel,e.onTouchEnd,u)}(i.simulateTouch&&!o.ios&&!o.android||i.simulateTouch&&!l.touch&&o.ios)&&(n.removeEventListener("mousedown",e.onTouchStart,!1),t.removeEventListener("mousemove",e.onTouchMove,d),t.removeEventListener("mouseup",e.onTouchEnd,!1))}(i.preventClicks||i.preventClicksPropagation)&&n.removeEventListener("click",e.onClick,!0),i.cssMode&&a.removeEventListener("scroll",e.onScroll),e.off(o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",N)}},breakpoints:{setBreakpoint:function(){var e=this,t=e.activeIndex,i=e.initialized,r=e.loopedSlides,s=void 0===r?0:r,n=e.params,a=e.$el,o=n.breakpoints;if(o&&(!o||0!==Object.keys(o).length)){var l=e.getBreakpoint(o);if(l&&e.currentBreakpoint!==l){var d=l in o?o[l]:void 0;d&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach((function(e){var t=d[e];void 0!==t&&(d[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")}));var u=d||e.originalParams,p=n.slidesPerColumn>1,c=u.slidesPerColumn>1;p&&!c?(a.removeClass(n.containerModifierClass+"multirow "+n.containerModifierClass+"multirow-column"),e.emitContainerClasses()):!p&&c&&(a.addClass(n.containerModifierClass+"multirow"),"column"===u.slidesPerColumnFill&&a.addClass(n.containerModifierClass+"multirow-column"),e.emitContainerClasses());var v=u.direction&&u.direction!==n.direction,h=n.loop&&(u.slidesPerView!==n.slidesPerView||v);v&&i&&e.changeDirection(),y(e.params,u),y(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=l,e.emit("_beforeBreakpoint",u),h&&i&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-s+e.loopedSlides,0,!1)),e.emit("breakpoint",u)}}},getBreakpoint:function(e){var t=n();if(e){var i=!1,r=Object.keys(e).map((function(e){if("string"==typeof e&&0===e.indexOf("@")){var i=parseFloat(e.substr(1));return{value:t.innerHeight*i,point:e}}return{value:e,point:e}}));r.sort((function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)}));for(var s=0;s<r.length;s+=1){var a=r[s],o=a.point;a.value<=t.innerWidth&&(i=o)}return i||"max"}}},checkOverflow:{checkOverflow:function(){var e=this,t=e.params,i=e.isLocked,r=e.slides.length>0&&t.slidesOffsetBefore+t.spaceBetween*(e.slides.length-1)+e.slides[0].offsetWidth*e.slides.length;t.slidesOffsetBefore&&t.slidesOffsetAfter&&r?e.isLocked=r<=e.size:e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,i!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),i&&i!==e.isLocked&&(e.isEnd=!1,e.navigation&&e.navigation.update())}},classes:{addClasses:function(){var e=this,t=e.classNames,i=e.params,r=e.rtl,s=e.$el,n=e.device,a=[];a.push("initialized"),a.push(i.direction),i.freeMode&&a.push("free-mode"),i.autoHeight&&a.push("autoheight"),r&&a.push("rtl"),i.slidesPerColumn>1&&(a.push("multirow"),"column"===i.slidesPerColumnFill&&a.push("multirow-column")),n.android&&a.push("android"),n.ios&&a.push("ios"),i.cssMode&&a.push("css-mode"),a.forEach((function(e){t.push(i.containerModifierClass+e)})),s.addClass(t.join(" ")),e.emitContainerClasses()},removeClasses:function(){var e=this,t=e.$el,i=e.classNames;t.removeClass(i.join(" ")),e.emitContainerClasses()}},images:{loadImage:function(e,t,i,r,s,a){var o,l=n();function d(){a&&a()}C(e).parent("picture")[0]||e.complete&&s?d():t?((o=new l.Image).onload=d,o.onerror=d,r&&(o.sizes=r),i&&(o.srcset=i),t&&(o.src=t)):d()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var i=0;i<e.imagesToLoad.length;i+=1){var r=e.imagesToLoad[i];e.loadImage(r,r.currentSrc||r.getAttribute("src"),r.srcset||r.getAttribute("srcset"),r.sizes||r.getAttribute("sizes"),!0,t)}}}},R={},q=function(){function e(){for(var t,i,r=arguments.length,s=new Array(r),n=0;n<r;n++)s[n]=arguments[n];1===s.length&&s[0].constructor&&s[0].constructor===Object?i=s[0]:(t=s[0],i=s[1]),i||(i={}),i=y({},i),t&&!i.el&&(i.el=t);var a=this;a.support=P(),a.device=k({userAgent:i.userAgent}),a.browser=L(),a.eventsListeners={},a.eventsAnyListeners=[],void 0===a.modules&&(a.modules={}),Object.keys(a.modules).forEach((function(e){var t=a.modules[e];if(t.params){var r=Object.keys(t.params)[0],s=t.params[r];if("object"!=typeof s||null===s)return;if(!(r in i)||!("enabled"in s))return;!0===i[r]&&(i[r]={enabled:!0}),"object"!=typeof i[r]||"enabled"in i[r]||(i[r].enabled=!0),i[r]||(i[r]={enabled:!1})}}));var o=y({},j);a.useParams(o),a.params=y({},o,R,i),a.originalParams=y({},a.params),a.passedParams=y({},i),a.params&&a.params.on&&Object.keys(a.params.on).forEach((function(e){a.on(e,a.params.on[e])})),a.params&&a.params.onAny&&a.onAny(a.params.onAny),a.$=C;var l=C(a.params.el);if(t=l[0]){if(l.length>1){var d=[];return l.each((function(t){var r=y({},i,{el:t});d.push(new e(r))})),d}var u,p,c;return t.swiper=a,t&&t.shadowRoot&&t.shadowRoot.querySelector?(u=C(t.shadowRoot.querySelector("."+a.params.wrapperClass))).children=function(e){return l.children(e)}:u=l.children("."+a.params.wrapperClass),y(a,{$el:l,el:t,$wrapperEl:u,wrapperEl:u[0],classNames:[],slides:C(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===a.params.direction},isVertical:function(){return"vertical"===a.params.direction},rtl:"rtl"===t.dir.toLowerCase()||"rtl"===l.css("direction"),rtlTranslate:"horizontal"===a.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===l.css("direction")),wrongRTL:"-webkit-box"===u.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:a.params.allowSlideNext,allowSlidePrev:a.params.allowSlidePrev,touchEvents:(p=["touchstart","touchmove","touchend","touchcancel"],c=["mousedown","mousemove","mouseup"],a.support.pointerEvents&&(c=["pointerdown","pointermove","pointerup"]),a.touchEventsTouch={start:p[0],move:p[1],end:p[2],cancel:p[3]},a.touchEventsDesktop={start:c[0],move:c[1],end:c[2]},a.support.touch||!a.params.simulateTouch?a.touchEventsTouch:a.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video, label",lastClickTime:b(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:a.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),a.useModules(),a.emit("_swiper"),a.params.init&&a.init(),a}}var t,i,r=e.prototype;return r.emitContainerClasses=function(){var e=this;if(e.params._emitClasses&&e.el){var t=e.el.className.split(" ").filter((function(t){return 0===t.indexOf("swiper-container")||0===t.indexOf(e.params.containerModifierClass)}));e.emit("_containerClasses",t.join(" "))}},r.getSlideClasses=function(e){var t=this;return e.className.split(" ").filter((function(e){return 0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass)})).join(" ")},r.emitSlidesClasses=function(){var e=this;e.params._emitClasses&&e.el&&e.slides.each((function(t){var i=e.getSlideClasses(t);e.emit("_slideClass",t,i)}))},r.slidesPerViewDynamic=function(){var e=this,t=e.params,i=e.slides,r=e.slidesGrid,s=e.size,n=e.activeIndex,a=1;if(t.centeredSlides){for(var o,l=i[n].swiperSlideSize,d=n+1;d<i.length;d+=1)i[d]&&!o&&(a+=1,(l+=i[d].swiperSlideSize)>s&&(o=!0));for(var u=n-1;u>=0;u-=1)i[u]&&!o&&(a+=1,(l+=i[u].swiperSlideSize)>s&&(o=!0))}else for(var p=n+1;p<i.length;p+=1)r[p]-r[n]<s&&(a+=1);return a},r.update=function(){var e=this;if(e&&!e.destroyed){var t=e.snapGrid,i=e.params;i.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(r(),e.params.autoHeight&&e.updateAutoHeight()):(("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0))||r(),i.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}function r(){var t=e.rtlTranslate?-1*e.translate:e.translate,i=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(i),e.updateActiveIndex(),e.updateSlidesClasses()}},r.changeDirection=function(e,t){void 0===t&&(t=!0);var i=this,r=i.params.direction;return e||(e="horizontal"===r?"vertical":"horizontal"),e===r||"horizontal"!==e&&"vertical"!==e||(i.$el.removeClass(""+i.params.containerModifierClass+r).addClass(""+i.params.containerModifierClass+e),i.emitContainerClasses(),i.params.direction=e,i.slides.each((function(t){"vertical"===e?t.style.width="":t.style.height=""})),i.emit("changeDirection"),t&&i.update()),i},r.init=function(){var e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"),e.emit("afterInit"))},r.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var i,r=this,s=r.params,n=r.$el,a=r.$wrapperEl,o=r.slides;return void 0===r.params||r.destroyed||(r.emit("beforeDestroy"),r.initialized=!1,r.detachEvents(),s.loop&&r.loopDestroy(),t&&(r.removeClasses(),n.removeAttr("style"),a.removeAttr("style"),o&&o.length&&o.removeClass([s.slideVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),r.emit("destroy"),Object.keys(r.eventsListeners).forEach((function(e){r.off(e)})),!1!==e&&(r.$el[0].swiper=null,i=r,Object.keys(i).forEach((function(e){try{i[e]=null}catch(e){}try{delete i[e]}catch(e){}}))),r.destroyed=!0),null},e.extendDefaults=function(e){y(R,e)},e.installModule=function(t){e.prototype.modules||(e.prototype.modules={});var i=t.name||Object.keys(e.prototype.modules).length+"_"+b();e.prototype.modules[i]=t},e.use=function(t){return Array.isArray(t)?(t.forEach((function(t){return e.installModule(t)})),e):(e.installModule(t),e)},t=e,i=[{key:"extendedDefaults",get:function(){return R}},{key:"defaults",get:function(){return j}}],null&&_(t.prototype,null),i&&_(t,i),e}();Object.keys(W).forEach((function(e){Object.keys(W[e]).forEach((function(t){q.prototype[t]=W[e][t]}))})),q.use([O,I]);const X=q;function Y(){return(Y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(e[r]=i[r])}return e}).apply(this,arguments)}var U={update:function(){var e=this,t=e.params.navigation;if(!e.params.loop){var i=e.navigation,r=i.$nextEl,s=i.$prevEl;s&&s.length>0&&(e.isBeginning?s.addClass(t.disabledClass):s.removeClass(t.disabledClass),s[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass)),r&&r.length>0&&(e.isEnd?r.addClass(t.disabledClass):r.removeClass(t.disabledClass),r[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass))}},onPrevClick:function(e){var t=this;e.preventDefault(),t.isBeginning&&!t.params.loop||t.slidePrev()},onNextClick:function(e){var t=this;e.preventDefault(),t.isEnd&&!t.params.loop||t.slideNext()},init:function(){var e,t,i=this,r=i.params.navigation;(r.nextEl||r.prevEl)&&(r.nextEl&&(e=C(r.nextEl),i.params.uniqueNavElements&&"string"==typeof r.nextEl&&e.length>1&&1===i.$el.find(r.nextEl).length&&(e=i.$el.find(r.nextEl))),r.prevEl&&(t=C(r.prevEl),i.params.uniqueNavElements&&"string"==typeof r.prevEl&&t.length>1&&1===i.$el.find(r.prevEl).length&&(t=i.$el.find(r.prevEl))),e&&e.length>0&&e.on("click",i.navigation.onNextClick),t&&t.length>0&&t.on("click",i.navigation.onPrevClick),y(i.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this,t=e.navigation,i=t.$nextEl,r=t.$prevEl;i&&i.length&&(i.off("click",e.navigation.onNextClick),i.removeClass(e.params.navigation.disabledClass)),r&&r.length&&(r.off("click",e.navigation.onPrevClick),r.removeClass(e.params.navigation.disabledClass))}};const K={name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){S(this,{navigation:Y({},U)})},on:{init:function(e){e.navigation.init(),e.navigation.update()},toEdge:function(e){e.navigation.update()},fromEdge:function(e){e.navigation.update()},destroy:function(e){e.navigation.destroy()},click:function(e,t){var i,r=e.navigation,s=r.$nextEl,n=r.$prevEl;!e.params.navigation.hideOnClick||C(t.target).is(n)||C(t.target).is(s)||(s?i=s.hasClass(e.params.navigation.hiddenClass):n&&(i=n.hasClass(e.params.navigation.hiddenClass)),!0===i?e.emit("navigationShow"):e.emit("navigationHide"),s&&s.toggleClass(e.params.navigation.hiddenClass),n&&n.toggleClass(e.params.navigation.hiddenClass))}}};function J(){return(J=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(e[r]=i[r])}return e}).apply(this,arguments)}var Q={update:function(){var e=this,t=e.rtl,i=e.params.pagination;if(i.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var r,s=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,n=e.pagination.$el,a=e.params.loop?Math.ceil((s-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((r=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>s-1-2*e.loopedSlides&&(r-=s-2*e.loopedSlides),r>a-1&&(r-=a),r<0&&"bullets"!==e.params.paginationType&&(r=a+r)):r=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===i.type&&e.pagination.bullets&&e.pagination.bullets.length>0){var o,l,d,u=e.pagination.bullets;if(i.dynamicBullets&&(e.pagination.bulletSize=u.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),n.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(i.dynamicMainBullets+4)+"px"),i.dynamicMainBullets>1&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=r-e.previousIndex,e.pagination.dynamicBulletIndex>i.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=i.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),o=r-e.pagination.dynamicBulletIndex,d=((l=o+(Math.min(u.length,i.dynamicMainBullets)-1))+o)/2),u.removeClass(i.bulletActiveClass+" "+i.bulletActiveClass+"-next "+i.bulletActiveClass+"-next-next "+i.bulletActiveClass+"-prev "+i.bulletActiveClass+"-prev-prev "+i.bulletActiveClass+"-main"),n.length>1)u.each((function(e){var t=C(e),s=t.index();s===r&&t.addClass(i.bulletActiveClass),i.dynamicBullets&&(s>=o&&s<=l&&t.addClass(i.bulletActiveClass+"-main"),s===o&&t.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),s===l&&t.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next"))}));else{var p=u.eq(r),c=p.index();if(p.addClass(i.bulletActiveClass),i.dynamicBullets){for(var v=u.eq(o),h=u.eq(l),f=o;f<=l;f+=1)u.eq(f).addClass(i.bulletActiveClass+"-main");if(e.params.loop)if(c>=u.length-i.dynamicMainBullets){for(var m=i.dynamicMainBullets;m>=0;m-=1)u.eq(u.length-m).addClass(i.bulletActiveClass+"-main");u.eq(u.length-i.dynamicMainBullets-1).addClass(i.bulletActiveClass+"-prev")}else v.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),h.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next");else v.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),h.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next")}}if(i.dynamicBullets){var g=Math.min(u.length,i.dynamicMainBullets+4),w=(e.pagination.bulletSize*g-e.pagination.bulletSize)/2-d*e.pagination.bulletSize,b=t?"right":"left";u.css(e.isHorizontal()?b:"top",w+"px")}}if("fraction"===i.type&&(n.find("."+i.currentClass).text(i.formatFractionCurrent(r+1)),n.find("."+i.totalClass).text(i.formatFractionTotal(a))),"progressbar"===i.type){var T;T=i.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";var y=(r+1)/a,S=1,x=1;"horizontal"===T?S=y:x=y,n.find("."+i.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+S+") scaleY("+x+")").transition(e.params.speed)}"custom"===i.type&&i.renderCustom?(n.html(i.renderCustom(e,r+1,a)),e.emit("paginationRender",n[0])):e.emit("paginationUpdate",n[0]),n[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](i.lockClass)}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,r=e.pagination.$el,s="";if("bullets"===t.type){for(var n=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length,a=0;a<n;a+=1)t.renderBullet?s+=t.renderBullet.call(e,a,t.bulletClass):s+="<"+t.bulletElement+' class="'+t.bulletClass+'"></'+t.bulletElement+">";r.html(s),e.pagination.bullets=r.find("."+t.bulletClass)}"fraction"===t.type&&(s=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class="'+t.currentClass+'"></span> / <span class="'+t.totalClass+'"></span>',r.html(s)),"progressbar"===t.type&&(s=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class="'+t.progressbarFillClass+'"></span>',r.html(s)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])}},init:function(){var e=this,t=e.params.pagination;if(t.el){var i=C(t.el);0!==i.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&i.length>1&&(i=e.$el.find(t.el)),"bullets"===t.type&&t.clickable&&i.addClass(t.clickableClass),i.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(i.addClass(""+t.modifierClass+t.type+"-dynamic"),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&i.addClass(t.progressbarOppositeClass),t.clickable&&i.on("click","."+t.bulletClass,(function(t){t.preventDefault();var i=C(this).index()*e.params.slidesPerGroup;e.params.loop&&(i+=e.loopedSlides),e.slideTo(i)})),y(e.pagination,{$el:i,el:i[0]}))}},destroy:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i=e.pagination.$el;i.removeClass(t.hiddenClass),i.removeClass(t.modifierClass+t.type),e.pagination.bullets&&e.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&i.off("click","."+t.bulletClass)}}};const Z={name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){S(this,{pagination:J({dynamicBulletIndex:0},Q)})},on:{init:function(e){e.pagination.init(),e.pagination.render(),e.pagination.update()},activeIndexChange:function(e){(e.params.loop||void 0===e.snapIndex)&&e.pagination.update()},snapIndexChange:function(e){e.params.loop||e.pagination.update()},slidesLengthChange:function(e){e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange:function(e){e.params.loop||(e.pagination.render(),e.pagination.update())},destroy:function(e){e.pagination.destroy()},click:function(e,t){e.params.pagination.el&&e.params.pagination.hideOnClick&&e.pagination.$el.length>0&&!C(t.target).hasClass(e.params.pagination.bulletClass)&&(!0===e.pagination.$el.hasClass(e.params.pagination.hiddenClass)?e.emit("paginationShow"):e.emit("paginationHide"),e.pagination.$el.toggleClass(e.params.pagination.hiddenClass))}}};X.use([K,Z]),new X(".swiper-container",{direction:"horizontal",loop:!0,navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,